Memory Internals
================

Benjamin Maitland

Memory Map
-------------------------------------------------------------------------------
The first part of setting up memory is getting the memory map of the system. 
This is done in the early initialization, immediately after the bootloader is
finished. I used Brennan's early initialization function to call the BIOS 
interrupt 0x15 with argument 0xE820. This got me a list of all memory segments.

Page Availibilty Table
-------------------------------------------------------------------------------
Once in the regular kernel, memory initialization can begin. First, the page
availability table (PAT) is set up. The PAT is a bitmap with a bit for every 
page. If the bit is set, then the page is in use. To set it up, the memory map 
is walked, and the first usable memory segment that is not in the lower 1MB is
selected to be used as the PAT. The memory segment is then zero'd. After this
initial setup, the unusable parts of memory, the memory used in the PAT, and
the lower 1MB are set to being used in the PAT. 

get_next_page and free_page
------------------------------------------------------------------------------
Once the PAT is set up, pages can be allocated and freed. The get_next_page()
function finds the next available page in the PAT and returns its address. 
Performance is improved by caching the location in the table of the last 
available page and starting the search from its location. The page is zero'd before it is 
returned. If the search reaches around to the end of the PAT, the search loops
back to the start. If no pages are found, then the kernel will panic. 

The other main function for working with pages is the free_page() function. It 
takes an aligned memory address as an argument and returns the success. It 
will only fail if the memory addres that is given is not aligned. 

These two functions are at the core of the dynamic memory management.

Identity Mapped Page Table
------------------------------------------------------------------------------
After the PAT is set up, the actual page tables can be set up. x86 paging is 
set up with two levels of indirection. A Page Directory (PDE) points to a Page
Table (PDE), which points to the physical address where the page starts. For
kernel processes and interupt handling, an indentity mapped page table was
used. An identity mapped page table maps virtual addresses 1:1 with physical 
memory. 

When setting up paging, the first step is to build the PDE. A new page is 
obtained with the get_next_page() function. Next, new PTEs are added to the 
PDE, and made to point to the correct addresses with the correct flags set. 

Once the new page directory is set, the page fault ISR (which will be 
triggered if any virtual memory is accessed that is not mapped) is installed,
and the identity mapped page table is set to the current one.

Seting the Current PDE
------------------------------------------------------------------------------
The process to set the current PDE is rather simple. First, the address of the
PDE must be loaded into the control register %cr3. Then, the paging and 
protection bits of the %cr0 register must be set. Once these are set, you are 
now runing on virtual memory. 

Memory Spaces and Context Switching
------------------------------------------------------------------------------
Processes now have memory spaces associated with them. Processes running at 
the system priority are given the identity mapped memory space. All user 
processes are given new memory spaces with the lower PTE identity mapped for 
compatibility with interrupt code. 

Context switching is done in multiple stages. Whenever an interrupt triggers, 
the current memory space is saved and the identity mapped space is loaded. 
Once the interrupt has been serviced, the old memory space is loaded. When 
a new process is started, it immediately switches to its new memory space and
changes the return memory space to its space. This avoids switching to a
new memory space, and then switching back to the stored memory space.

Memory Mapping
------------------------------------------------------------------------------
New memory spaces are intially unmapped besides the initial identity mapped 
region. Mapping new memory to a memory space is accomplished using the mmap 
syscall and the _k_mmap() function. The _k_mmap() function takes an address 
space, a virtual memory pointer, a physical memory pointer, a length, and a 
pointer to a status variable. It returns a pointer to the start of the area
mapped. The mmap syscall is a wrapper of the _k_mmap function; it gives the 
current process's memory space as the first argument and passes the rest from 
the syscall parameters. It does not return anything.

There are two modes that the mmap syscall can act in: plain mapping and 
mapping the next page. In plain mapping, the physical address passed as a 
parameter to the function is not null. In this case, the virtual page is 
mapped to the physical page, and the physical page is not marked as being 
used. When maping the next page, the physical address given is null. The 
next availible page is then mapped to the given virtual address. 

